@page "/rays"

@using Basics.Geometry
@using Basics.Web.Components

@inject HttpClient Http

<h1>Rays...</h1>
<p>Fetched from the server.</p>

@if (rays == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Number</th>
                <th>Origin</th>
                <th>Direction</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ray in rays)
            {
                <tr>
                    <td>@rays.IndexOf(ray)</td>
                    <td>@ray.Origin</td>
                    <td>@ray.Direction</td>
                    <td>@ray</td>
                </tr>
            }
        </tbody>
    </table>

    <DrawingContainer @ref="myDrawingContainer" Width="720" Height="720"></DrawingContainer>
}

@code {
    private DrawingContainer myDrawingContainer;
    private List<Ray2D> rays;
    private List<Point2D> intersections;
    private bool handlerAdded = false;

    protected override async Task OnInitializedAsync()
    {
        if (myDrawingContainer == null)
        {
            rays = await Http.GetFromJsonAsync<List<Ray2D>>("Rays");
            var intersectionResponse = await Http.PostAsJsonAsync<List<Ray2D>>( "Rays/Intersections", rays);
            intersections = await intersectionResponse.Content.ReadFromJsonAsync<List<Point2D>>();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender && !handlerAdded)
        {
            myDrawingContainer.ControlReady += async (s, e) => await Draw();
            handlerAdded = true;
        }
    }

    private async Task Draw()
    {
        if (myDrawingContainer == null || rays == null)
            return;

        foreach (var ray in rays)
            await myDrawingContainer.DrawRayNormalized(ray);

        foreach (var intersection in intersections)
            await myDrawingContainer.DrawPointNormalized(intersection, 6);
    }
}