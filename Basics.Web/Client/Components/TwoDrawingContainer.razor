@namespace Basics.Web.Components
@inject IJSRuntime JSRuntime;

<div @ref="myCanvas" id="@CanvasID" width="@Width" height="@Height"></div>

@code {
    private ElementReference myCanvas = default;
    public event EventHandler ControlReady;


    [Parameter]
    public string CanvasID { get; set; } = "twoDrawingCanvas";

    [Parameter]
    public int Width { get; set; } = 640;

    [Parameter]
    public int Height { get; set; } = 480;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("TwoDrawingFunctions.Setup", CanvasID);
            if (ControlReady != null)
                ControlReady(this, new EventArgs());
        }
    }

    public async Task ClearFrame()
    {
        await JSRuntime.InvokeVoidAsync("TwoDrawingFunctions.Clear");
    }

    public async Task UpdateFrame()
    {
        await JSRuntime.InvokeVoidAsync("TwoDrawingFunctions.Update");
    }

    public async Task DrawPointNormalized(Basics.Geometry.Point2D point, double size = 5)
    {
        if (!string.IsNullOrWhiteSpace(myCanvas.Id))
            await JSRuntime.InvokeVoidAsync("TwoDrawingFunctions.DrawPointNormalized", point.X, point.Y, size);
    }

    public async Task DrawPoint(Basics.Geometry.Point2D point, double size = 5)
    {
        if (!string.IsNullOrWhiteSpace(myCanvas.Id))
            await JSRuntime.InvokeVoidAsync("TwoDrawingFunctions.DrawPoint", point.X, point.Y, size);
    }

    public async Task DrawPoints(List<Basics.Geometry.Point2D> points, double size = 5)
    {
        if (!string.IsNullOrWhiteSpace(myCanvas.Id))
            await JSRuntime.InvokeVoidAsync("TwoDrawingFunctions.DrawPoints", points, size);
    }

    //public async Task DrawVectorNormalized(Basics.Geometry.Vector2D vector)
    //{
    //    if (!string.IsNullOrWhiteSpace(myCanvas.Id))
    //        await JSRuntime.InvokeVoidAsync("DrawingFunctions.DrawVectorNormalized", vector.X, vector.Y);
    //}

    //public async Task DrawRayNormalized(Basics.Geometry.Ray2D ray)
    //{
    //    if (!string.IsNullOrWhiteSpace(myCanvas.Id))
    //        await JSRuntime.InvokeVoidAsync("DrawingFunctions.DrawRayNormalized", ray);
    //}

    //public async Task DrawRay(Basics.Geometry.Ray2D ray)
    //{
    //    if (!string.IsNullOrWhiteSpace(myCanvas.Id))
    //        await JSRuntime.InvokeVoidAsync("DrawingFunctions.DrawRay", ray);
    //}

    public async Task DrawRays(List<Basics.Geometry.Ray2D> rays)
    {
        if (!string.IsNullOrWhiteSpace(myCanvas.Id))
            await JSRuntime.InvokeVoidAsync("TwoDrawingFunctions.DrawRays", rays);
    }

    public async Task DrawAnimatedObjects(List<Basics.Web.Animation.Animatable> animationObjects)
    {
        await DrawPoints(animationObjects.Select(a => a.Position).ToList(), 3);
        await DrawRays(animationObjects.Select(a => a.ForceToDraw).ToList());
    }
}